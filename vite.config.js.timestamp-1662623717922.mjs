// vite.config.js
import { sveltekit } from "@sveltejs/kit/vite";

// server/injectSocketIO.js
import { Server } from "socket.io";

// server/allowedOrigins.js
var { env: { ALLOWED_ORIGIN } } = process;
console.log("ALLOWED_ORIGIN: ", ALLOWED_ORIGIN);
var _a;
var allowedOrigins = ((_a = ALLOWED_ORIGIN == null ? void 0 : ALLOWED_ORIGIN.split(",")) == null ? void 0 : _a.reduce((reduced, o) => {
  if (o && typeof o === "string") {
    const originLowered = o.trim().toLowerCase();
    if (originLowered) {
      reduced.push(originLowered);
    }
  }
  return reduced;
}, [])) ?? [];
var allowedOriginsSocketIOMiddleware = (requestOrigin, callback) => {
  if (requestOrigin && typeof requestOrigin === "string") {
    const incomingLowered = requestOrigin.trim().toLowerCase();
    if (allowedOrigins.indexOf(incomingLowered) >= 0) {
      callback(null, true);
      return;
    }
  }
  callback(new Error("CORS not allowed"));
};

// src/lib/nanoids/index.js
import { customAlphabet as customAlphabetAsync } from "nanoid/async";
var getAlphabetArgs = { alphabet: "", additionnalChars: "" };
var getAlphabet = (args = getAlphabetArgs) => {
  let { alphabet, additionnalChars } = args;
  let result;
  switch (alphabet == null ? void 0 : alphabet.toLowerCase()) {
    case "lower":
      result = "0123456789abcdefghijklmnopqrstuvwxyz";
      break;
    case "upper":
      result = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      break;
    case "numeric":
      result = "0123456789";
      break;
    default:
      result = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      break;
  }
  if (additionnalChars && typeof additionnalChars === "string") {
    const arr = [...additionnalChars];
    arr.forEach((c) => {
      if (result.indexOf(c) < 0) {
        result += c;
      }
    });
  }
  return result;
};
var nanoidAsync = (characterCount, options = getAlphabetArgs) => {
  characterCount = parseInt(characterCount);
  if (!(characterCount > 0))
    throw Error("Invalid character count");
  const alphabet = getAlphabet(options);
  return customAlphabetAsync(alphabet, characterCount);
};
var nanoidAlphaNumericAsync = (characterCount, alphabet) => {
  return nanoidAsync(characterCount, { alphabet });
};
var nanoid12AlphaNumericAsync = nanoidAlphaNumericAsync(12);

// server/injectSocketIO.js
var injectSocketIO = (server) => {
  const io = new Server(server, {
    cookie: false,
    cors: {
      origin: allowedOriginsSocketIOMiddleware,
      methods: ["GET", "POST"],
      allowedHeaders: ["Content-Type", "Authorization"]
    }
  });
  io.on("connection", async (socket) => {
    const id = await nanoidAsync(16)();
    const username = `Session #${id}`;
    socket.emit("name", username);
    socket.on("message", (message) => {
      io.emit("message", {
        from: username,
        message,
        time: new Date().toLocaleString()
      });
    });
  });
  console.log("SocketIO injected");
};

// server/webSocketServer.js
var webSocketServer = {
  name: "webSocketServer",
  configureServer: (server) => {
    injectSocketIO(server.httpServer);
  }
};

// vite.config.js
var config = {
  server: {
    port: 50001
  },
  preview: {
    port: 50001
  },
  plugins: [sveltekit(), webSocketServer]
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
